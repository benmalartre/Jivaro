-- glslfx version 0.1

//
// Copyright 2019 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//

-- configuration
{
    "techniques": {
        "default": {
            "volumeShader": {
                "source": [ "EllipsoidalVolume.VolumeShader" ]
            }
        }
    },
    "parameters" : {
        "emissionColor": {
            "default": [0.0, 0.0, 0.0],
            "description" : "density"
        }
    }
}

--- --------------------------------------------------------------------------
-- glsl EllipsoidalVolume.VolumeShader

// Forward declare function.
FORWARD_DECL(vec3 coordsToLocalVolumeSpace(vec3));

// The functions given here are for an ellipsoid shaped volume of constant
// density not emitting light.

// "Distance" of point p in local space to center of bounding box.
// It is such that it is >0.5 exactly for the points outside the ellipsoid
// bounded by the bounding box.
float
scaledDistance(vec3 coords)
{
    const vec3 p = coordsToLocalVolumeSpace(coords);

    // Bounding box
    const vec3 localMin = HdGet_bboxLocalMin().xyz;
    const vec3 localMax = HdGet_bboxLocalMax().xyz;

    vec3 relativeToCenter = p - (localMin + localMax) / 2;
    relativeToCenter /= (localMax - localMin);

    return length(relativeToCenter);
}

// Extinction function, returns sum of absorption and out-scattering cross
// ratio.
//
// Here: constant on ellipsoid and zero outside.
float
extinctionFunction(vec3 coords)
{
    const float density = 1.5;

    // Note that we want a decreasing step function, so we swapped the
    // arguments to step.
    return density * step(scaledDistance(coords), 0.5);
}

// Scattering function, returns in-scattering cross-section (will be combined
// with phase function).
//
// Here: constant on ellipsoid and zero outside.
float
scatteringFunction(vec3 coords)
{
    const float scattering = 0.5;

    // Note that we want a decreasing step function, so we swapped the
    // arguments to step.
    return scattering * step(scaledDistance(coords), 0.5);
}

// Emission function, returns emission cross-section.
//
// Here: zero since volume is not emitting light.
vec3
emissionFunction(vec3 coords)
{
    const vec3 emission = HdGet_emissionColor();

    return emission;
}

// Phase function in volume rendering equation.
//
// Here: isotropic.
float
phaseFunction(vec3 direction1, vec3 direction2)
{
    const float pi = 3.14159265358979;
    const float sphereArea = 4.0 * pi;
    const float inverseSphereArea = 1.0 / sphereArea;

    return inverseSphereArea;
}


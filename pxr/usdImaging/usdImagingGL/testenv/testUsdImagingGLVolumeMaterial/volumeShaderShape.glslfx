-- glslfx version 0.1

//
// Copyright 2019 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//

-- configuration
{
    "techniques": {
        "default": {
            "volumeShader": {
                "source": [ "VolumeShaderShape.VolumeShader" ]
            }
        }
    }
}

--- --------------------------------------------------------------------------
-- glsl VolumeShaderShape.VolumeShader

// Forward declare function.
FORWARD_DECL(vec3 coordsToLocalVolumeSpace(vec3));

// Computes the distance of a point with respect to the L^p-norm where p
// is given by HdGet_eta(). The clients below use the step function to produce
// a L^p-ball shaped volume.
//
// The L^2-ball is an ellipsoid fitting into the bounding box.
// The L^inf-ball is the bounding box itself.
// THe L^1-ball is an octahedron fitting into the bounding box.
//
float
scaledDistance(vec3 coords)
{
    const vec3 p = coordsToLocalVolumeSpace(coords);

    // Bounding box
    const vec3 localMin = HdGet_bboxLocalMin().xyz;
    const vec3 localMax = HdGet_bboxLocalMax().xyz;

    vec3 relativeToCenter = 2 * p - (localMin + localMax);
    relativeToCenter /= (localMax - localMin);

    vec3 t = pow(abs(relativeToCenter), vec3(HdGet_eta()));
    return t.x + t.y + t.z;
}

// Extinction function, returns sum of absorption and out-scattering cross
// ratio.
//
// Here: constant on ellipsoid and zero outside.
float
extinctionFunction(vec3 coords)
{
    const float density = 1.5;

    // Note that we want a decreasing step function, so we swapped the
    // arguments to step.
    return density * step(scaledDistance(coords), 1.0);
}

// Scattering function, returns in-scattering cross-section (will be combined
// with phase function).
//
// Here: constant on ellipsoid and zero outside.
float
scatteringFunction(vec3 coords)
{
    const float scattering = 0.5;

    return scattering * step(scaledDistance(coords), 1.0);
}

// Emission function, returns emission cross-section.
//
// Here: zero.
vec3
emissionFunction(vec3 coords)
{
    const vec3 emission = vec3(0.0);

    return emission;
}

// Phase function in volume rendering equation.
//
// Here: isotropic.
float
phaseFunction(vec3 direction1, vec3 direction2)
{
    const float pi = 3.14159265358979;
    const float sphereArea = 4.0 * pi;
    const float inverseSphereArea = 1.0 / sphereArea;

    return inverseSphereArea;
}


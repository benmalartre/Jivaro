#usda 1.0
(
    startTimeCode = 0
    endTimeCode = 5
    framesPerSecond = 24
    upAxis = "Y"
)

class "_Reference"
{
    float3[] extent = [(-0.5, -0.5, 0), (0.5, 0.5, 0.25)]
    point3f[] points = [
        (0, 0, 0.25),
        (0.5, 0.5, 0),
        (-0.5, 0.5, 0),
        (-0.5, -0.5, 0),
        (0.5, -0.5, 0),
        (0, 0, 0)
    ]
    int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3]
    int[] faceVertexIndices = [
        5,3,2,
        4,3,5,
        1,4,5,
        1,0,4,
        4,0,3,
        3,0,2,
        0,1,5,
        5,2,0
    ]
    uniform token orientation = "leftHanded"
    uniform token subdivisionScheme = "none"
    color3f[] primvars:displayColor = [(0, 0, 1)]
}


class "_Pointer"
{
    float3[] extent = [(-0.5, 0, 0), (0.5, 0.5, 0.25)]
    point3f[] points = [
        (0, 0, 0.25),
        (0.5, 0.5, 0),
        (-0.5, 0.5, 0),
        (0, 0, 0)
    ]
    int[] faceVertexCounts = [3, 3, 3, 3]
    int[] faceVertexIndices = [
        3, 2, 1,
        0, 1, 2,
        1, 0, 3,
        2, 3, 0]
    uniform token orientation = "leftHanded"
    uniform token subdivisionScheme = "none"
    color3f[] primvars:displayColor = [(0, 1, 1)]
}


def Xform "World"
{
    def Camera "main_cam"
    {
        float focalLength = 24
        vector3f xformOp:translate = (2.5, 2.5, 20)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    # def Xform "Prototypes"
    # {
    #     token visibility = "invisible"
        
    #     def Mesh "Reference"
    #     {
    #         float3[] extent = [(-0.5, -0.5, 0), (0.5, 0.5, 0.25)]
    #         point3f[] points = [
    #             (0, 0, 0.25),
    #             (0.5, 0.5, 0),
    #             (-0.5, 0.5, 0),
    #             (-0.5, -0.5, 0),
    #             (0.5, -0.5, 0),
    #             (0, 0, 0)
    #         ]
    #         int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3]
    #         int[] faceVertexIndices = [
    #             5,3,2,
    #             4,3,5,
    #             1,4,5,
    #             1,0,4,
    #             4,0,3,
    #             3,0,2,
    #             0,1,5,
    #             5,2,0
    #         ]
    #         uniform token orientation = "leftHanded"
    #         uniform token subdivisionScheme = "none"
    #         color3f[] primvars:displayColor = [(0, 0, 1)]
    #     }
        
    #     def Mesh "Pointer"
    #     {
    #         float3[] extent = [(-0.5, 0, 0), (0.5, 0.5, 0.25)]
    #         point3f[] points = [
    #             (0, 0, 0.25),
    #             (0.5, 0.5, 0),
    #             (-0.5, 0.5, 0),
    #             (0, 0, 0)
    #         ]
    #         int[] faceVertexCounts = [3, 3, 3, 3]
    #         int[] faceVertexIndices = [
    #             3, 2, 1,
    #             0, 1, 2,
    #             1, 0, 3,
    #             2, 3, 0]
    #         uniform token orientation = "leftHanded"
    #         uniform token subdivisionScheme = "none"
    #         color3f[] primvars:displayColor = [(0, 1, 1)]
    #     }
    # }
    
    def Xform "OrientationsVelocity"
    {
        def PointInstancer "Reference"
        {
            point3f[] positions = [(0, 0, 0)]
            quath[] orientations.timeSamples = {
                0: [(1, 0, 0, 0)],
                1: [(0.809, 0, 0, 0.588)],
                2: [(0.309, 0, 0, 0.951)],
                3: [(-0.309, 0, 0, 0.951)],
                4: [(-0.809, 0, 0, 0.588)],
                5: [(-1, 0, 0, 0)]
            }
            int[] protoIndices = [0]
            rel prototypes = [</World/OrientationsVelocity/Reference/Prototypes/Reference>]
            
            def Xform "Prototypes"
            {
                def Mesh "Reference" (
                    inherits = </_Reference>
                )
                { }
            }
        }
        
        def PointInstancer "Pointer"
        {
            point3f[] positions = [(0, 0, 0)]
            quath[] orientations.timeSamples = {
                0: [(1, 0, 0, 0)],
                5: [(-1, 0, 0, 0)]
            }
            vector3f[] angularVelocities.timeSamples = {
                0: [(0, 0, 1728)],
                5: [(0, 0, 0)]
            }
            int[] protoIndices = [0]
            rel prototypes = [</World/OrientationsVelocity/Pointer/Prototypes/Pointer>]      
            
            def Xform "Prototypes"
            {
                def Mesh "Pointer" (
                    inherits = </_Pointer>
                )
                { }
            }      
        }
        
        vector3f xformOp:translate = (2.5, 8, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
    
    def Xform "PointsAcceleration"
    {
        def Mesh "Reference"
        {
            float3[] extent = [(-0.5, -0.5, 0),(5.5, 0.5, 0.25)]
            point3f[] points.timeSamples = {
                0.0: [(0.000, 0, 0), (0.000, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                0.1: [(0.198, 0, 0), (0.198, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                0.2: [(0.392, 0, 0), (0.392, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                0.3: [(0.582, 0, 0), (0.582, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                0.4: [(0.768, 0, 0), (0.768, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                0.5: [(0.950, 0, 0), (0.950, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                0.6: [(1.128, 0, 0), (1.128, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                0.7: [(1.302, 0, 0), (1.302, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                0.8: [(1.472, 0, 0), (1.472, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                0.9: [(1.638, 0, 0), (1.638, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                1.0: [(1.800, 0, 0), (1.800, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                1.1: [(1.958, 0, 0), (1.958, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                1.2: [(2.112, 0, 0), (2.112, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                1.3: [(2.262, 0, 0), (2.262, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                1.4: [(2.408, 0, 0), (2.408, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                1.5: [(2.550, 0, 0), (2.550, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                1.6: [(2.688, 0, 0), (2.688, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                1.7: [(2.822, 0, 0), (2.822, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                1.8: [(2.952, 0, 0), (2.952, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                1.9: [(3.078, 0, 0), (3.078, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                2.0: [(3.200, 0, 0), (3.200, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                2.1: [(3.318, 0, 0), (3.318, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                2.2: [(3.432, 0, 0), (3.432, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                2.3: [(3.542, 0, 0), (3.542, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                2.4: [(3.648, 0, 0), (3.648, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                2.5: [(3.750, 0, 0), (3.750, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                2.6: [(3.848, 0, 0), (3.848, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                2.7: [(3.942, 0, 0), (3.942, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                2.8: [(4.032, 0, 0), (4.032, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                2.9: [(4.118, 0, 0), (4.118, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                3.0: [(4.200, 0, 0), (4.200, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                3.1: [(4.278, 0, 0), (4.278, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                3.2: [(4.352, 0, 0), (4.352, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                3.3: [(4.422, 0, 0), (4.422, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                3.4: [(4.488, 0, 0), (4.488, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                3.5: [(4.550, 0, 0), (4.550, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                3.6: [(4.608, 0, 0), (4.608, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                3.7: [(4.662, 0, 0), (4.662, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                3.8: [(4.712, 0, 0), (4.712, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                3.9: [(4.758, 0, 0), (4.758, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                4.0: [(4.800, 0, 0), (4.800, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                4.1: [(4.838, 0, 0), (4.838, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                4.2: [(4.872, 0, 0), (4.872, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                4.3: [(4.902, 0, 0), (4.902, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                4.4: [(4.928, 0, 0), (4.928, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                4.5: [(4.950, 0, 0), (4.950, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                4.6: [(4.968, 0, 0), (4.968, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                4.7: [(4.982, 0, 0), (4.982, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                4.8: [(4.992, 0, 0), (4.992, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                4.9: [(4.998, 0, 0), (4.998, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                5.0: [(5.000, 0, 0), (5.000, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)]
            }
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [
                0, 4, 3,
                2, 0, 3,
                5, 0, 2,
                1, 5, 2,
                3, 4, 1,
                2, 3, 1,
                1, 0, 5,
                4, 0, 1
            ]
            uniform token orientation = "leftHanded"
            uniform token subdivisionScheme = "none"
            color3f[] primvars:displayColor = [(0, 0, 1)]
        }
        
        def Mesh "Pointer"
        {
            float3[] extent = [(0, -0.5, 0), (5.5, 0.5, 0.25)]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (0, 0, 0.25), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                5: [(0, 0, 0), (0, 0, 0.25), (5.5, -0.5, 0), (5.5, 0.5, 0)],
            }
            vector3f[] velocities.timeSamples = {
                0: [(48, 0, 0), (48, 0, 0), (0, 0, 0), (0, 0, 0)],
                5: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]
            }
            vector3f[] accelerations.timeSamples = {
                0: [(-230.4, 0, 0), (-230.4, 0, 0), (0, 0, 0), (0, 0, 0)],
                5: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]
            }
            int[] faceVertexCounts = [3, 3, 3, 3]
            int[] faceVertexIndices = [
                0, 3, 2,
                3, 1, 2,
                3, 0, 1,
                2, 1, 0
            ]
            uniform token orientation = "leftHanded"
            uniform token subdivisionScheme = "none"
            color3f[] primvars:displayColor = [(0, 1, 1)]
        }
        vector3f xformOp:translate = (0, 6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
    
    def Xform "PositionsAcceleration"
    {
        
        def PointInstancer "Reference"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (5.5, 0.5, 0.5)]
            point3f[] positions.timeSamples = {
                0.0: [(0.000, 0, 0)],
                0.1: [(0.198, 0, 0)],
                0.2: [(0.392, 0, 0)],
                0.3: [(0.582, 0, 0)],
                0.4: [(0.768, 0, 0)],
                0.5: [(0.950, 0, 0)],
                0.6: [(1.128, 0, 0)],
                0.7: [(1.302, 0, 0)],
                0.8: [(1.472, 0, 0)],
                0.9: [(1.638, 0, 0)],
                1.0: [(1.800, 0, 0)],
                1.1: [(1.958, 0, 0)],
                1.2: [(2.112, 0, 0)],
                1.3: [(2.262, 0, 0)],
                1.4: [(2.408, 0, 0)],
                1.5: [(2.550, 0, 0)],
                1.6: [(2.688, 0, 0)],
                1.7: [(2.822, 0, 0)],
                1.8: [(2.952, 0, 0)],
                1.9: [(3.078, 0, 0)],
                2.0: [(3.200, 0, 0)],
                2.1: [(3.318, 0, 0)],
                2.2: [(3.432, 0, 0)],
                2.3: [(3.542, 0, 0)],
                2.4: [(3.648, 0, 0)],
                2.5: [(3.750, 0, 0)],
                2.6: [(3.848, 0, 0)],
                2.7: [(3.942, 0, 0)],
                2.8: [(4.032, 0, 0)],
                2.9: [(4.118, 0, 0)],
                3.0: [(4.200, 0, 0)],
                3.1: [(4.278, 0, 0)],
                3.2: [(4.352, 0, 0)],
                3.3: [(4.422, 0, 0)],
                3.4: [(4.488, 0, 0)],
                3.5: [(4.550, 0, 0)],
                3.6: [(4.608, 0, 0)],
                3.7: [(4.662, 0, 0)],
                3.8: [(4.712, 0, 0)],
                3.9: [(4.758, 0, 0)],
                4.0: [(4.800, 0, 0)],
                4.1: [(4.838, 0, 0)],
                4.2: [(4.872, 0, 0)],
                4.3: [(4.902, 0, 0)],
                4.4: [(4.928, 0, 0)],
                4.5: [(4.950, 0, 0)],
                4.6: [(4.968, 0, 0)],
                4.7: [(4.982, 0, 0)],
                4.8: [(4.992, 0, 0)],
                4.9: [(4.998, 0, 0)],
                5.0: [(5.000, 0, 0)]
            }
            int[] protoIndices = [0]
            rel prototypes = [</World/PositionsAcceleration/Reference/Prototypes/Reference>]
            
            def Xform "Prototypes"
            {
                def Mesh "Reference" (
                    inherits = </_Reference>
                )
                { }
            }
        }
        
        def PointInstancer "Pointer"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (5.5, 0.5, 0.5)]
            point3f[] positions.timeSamples = {
                0: [(0, 0, 0)],
                5: [(0, 0, 0)]
            }
            vector3f[] velocities.timeSamples = {
                0: [(48, 0, 0)],
                5: [(0, 0, 0)]
            }
            vector3f[] accelerations.timeSamples = {
                0: [(-230.4, 0, 0)],
                5: [(0, 0, 0)]
            }
            int[] protoIndices = [0]
            rel prototypes = [</World/PositionsAcceleration/Pointer/Prototypes/Pointer>]
            
            def Xform "Prototypes"
            {
                def Mesh "Pointer" (
                    inherits = </_Pointer>
                )
                { }
            }
        }
        
        vector3f xformOp:translate = (0, 4, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
    
    def Xform "PositionsVelocity"
    {
        def PointInstancer "Reference"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (5.5, 0.5, 0.5)]
            point3f[] positions.timeSamples = {
                0: [(0, 0, 0)],
                1: [(1, 0, 0)],
                2: [(2, 0, 0)],
                3: [(3, 0, 0)],
                4: [(4, 0, 0)],
                5: [(5, 0, 0)]
            }
            int[] protoIndices = [0]
            rel prototypes = [</World/PositionsVelocity/Reference/Prototypes/Reference>]
            
            def Xform "Prototypes"
            {
                def Mesh "Reference" (
                    inherits = </_Reference>
                )
                { }
            }
        }
        
        def PointInstancer "Pointer"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (5.5, 0.5, 0.5)]
            point3f[] positions.timeSamples = {
                0: [(0, 0, 0)],
                5: [(0, 0, 0)]
            }
            vector3f[] velocities.timeSamples = {
                0: [(24, 0, 0)],
                5: [(0, 0, 0)]
            }
            int[] protoIndices = [0]
            rel prototypes = [</World/PositionsVelocity/Pointer/Prototypes/Pointer>]
            
            def Xform "Prototypes"
            {
                def Mesh "Pointer" (
                    inherits = </_Pointer>
                )
                { }
            }
        }
        
        vector3f xformOp:translate = (0, 2, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
    
    def Xform "PointsVelocity"
    {
        def Mesh "Reference"
        {
            float3[] extent = [(-0.5, -0.5, 0),(5.5, 0.5, 0.25)]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (0, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                1: [(1, 0, 0), (1, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                2: [(2, 0, 0), (2, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                3: [(3, 0, 0), (3, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                4: [(4, 0, 0), (4, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                5: [(5, 0, 0), (5, 0, 0.25), (-0.5, 0.5, 0), (-0.5, -0.5, 0), (5.5, -0.5, 0), (5.5, 0.5, 0)],
            }
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [
                0, 4, 3,
                2, 0, 3,
                5, 0, 2,
                1, 5, 2,
                3, 4, 1,
                2, 3, 1,
                1, 0, 5,
                4, 0, 1
            ]
            uniform token orientation = "leftHanded"
            uniform token subdivisionScheme = "none"
            color3f[] primvars:displayColor = [(0, 0, 1)]
        }
        
        def Mesh "Pointer"
        {
            float3[] extent = [(0, -0.5, 0), (5.5, 0.5, 0.25)]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (0, 0, 0.25), (5.5, -0.5, 0), (5.5, 0.5, 0)],
                5: [(0, 0, 0), (0, 0, 0.25), (5.5, -0.5, 0), (5.5, 0.5, 0)],
            }
            vector3f[] velocities.timeSamples = {
                0: [(24, 0, 0), (24, 0, 0), (0, 0, 0), (0, 0, 0)],
                5: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]
            }
            int[] faceVertexCounts = [3, 3, 3, 3]
            int[] faceVertexIndices = [
                0, 3, 2,
                3, 1, 2,
                3, 0, 1,
                2, 1, 0
            ]
            uniform token orientation = "leftHanded"
            uniform token subdivisionScheme = "none"
            color3f[] primvars:displayColor = [(0, 1, 1)]
        }
    }
    
}

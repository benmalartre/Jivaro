set(TARGET jivaro)

add_definitions(
  -DTASKING_TBB
  -DNOMINMAX
)

add_executable(${TARGET}
  imgui/imgui_demo.cpp
  imgui/imgui_draw.cpp
  imgui/imgui_impl_glfw.cpp
  imgui/imgui_impl_opengl3.cpp
  imgui/imgui_widgets.cpp
  imgui/imgui_tables.cpp
  imgui/imgui_stdlib.cpp
  imgui/imgui.cpp
  utils/files.cpp
  utils/shaders.cpp
  utils/icons.cpp
  utils/prefs.cpp
  ui/ui.cpp
  ui/fonts.cpp
  ui/demo.cpp
  ui/textFilter.cpp
  ui/utils.cpp
  ui/popup.cpp
  ui/debug.cpp
  ui/fileBrowser.cpp
  ui/contentBrowser.cpp
  ui/splitter.cpp
  ui/tab.cpp
  ui/menu.cpp
  ui/textEditor.cpp
  ui/graphEditor.cpp
  ui/viewport.cpp
  ui/timeline.cpp
  ui/toolbar.cpp
  ui/layers.cpp
  ui/layerEditor.cpp
  ui/explorer.cpp
  ui/propertyEditor.cpp
  ui/curveEditor.cpp
  graph/graph.cpp
  graph/execution.cpp
  graph/hierarchy.cpp
  #embree/oiio.cpp
  #embree/jpeg.cpp
  #embree/utils.cpp
  #embree/sphere.cpp
  #embree/mesh.cpp
  #embree/subdiv.cpp
  #embree/instance.cpp
  #embree/context.cpp
  #embree/device.cpp
  geometry/utils.cpp
  geometry/shape.cpp
  geometry/intersection.cpp
  geometry/point.cpp
  geometry/edge.cpp
  geometry/triangle.cpp
  geometry/geometry.cpp
  geometry/points.cpp
  geometry/mesh.cpp
  geometry/curve.cpp
  geometry/stroke.cpp
  geometry/voronoi.cpp
  #geometry/vdb.cpp
  acceleration/mortom.cpp
  acceleration/intersector.cpp
  acceleration/grid3d.cpp
  acceleration/bvh.cpp
  acceleration/octree.cpp
  pbd/particle.cpp
  pbd/constraint.cpp
  pbd/solver.cpp
  anim/animx.cpp
  command/command.cpp
  command/inverse.cpp
  command/block.cpp
  command/router.cpp
  command/delegate.cpp
  command/manager.cpp
  app/time.cpp
  app/notice.cpp
  app/handle.cpp
  app/camera.cpp
  app/view.cpp
  app/window.cpp
  app/modal.cpp
  app/scene.cpp
  app/engine.cpp
  app/workspace.cpp
  app/picking.cpp
  app/selection.cpp
  app/tools.cpp
  #app/delegate.cpp
  app/application.cpp
  #tests/stageGraph.cpp
  #tests/stageUI.cpp
  main.cpp
)

# Application icon on windows
if(MSVC)
    target_sources(${TARGET} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/resources.rc)
endif()


target_include_directories(${TARGET} 
  PUBLIC
    ${USD_INCLUDE_DIR}
    #${Python2_INCLUDE_DIRS}
    ${EMBREE_INCLUDE_DIRS}
    ${GLFW_INCLUDE_DIR}
    ${TBB_INCLUDE_DIR}
    #${OPENVDB_INCLUDE_DIR}
	${BOOST_INCLUDE_DIR}
	${ICON_AWESOME_DIR}
)

target_link_libraries(${TARGET}
  ${OPENGL_LIBRARY}
  #{Python2_LIBRARIES}
  ${BOOST_LIBRARIES}
  ${USD_LIBRARIES}
  ${EMBREE_LIBRARIES}
  ${TBB_LIBRARIES}
  #${OPENVDB_LIBRARIES}
  ${GLFW}
  ${ADDITIONAL_LIBRARIES}
)

add_compile_options(/C4244)

#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED.  DO NOT EDIT."
    customLayerData = {
        string[] appliedAPISchemas = ["DeformableAPI"]
        string[] multipleApplyAPISchemas = []
    }
)

class Graph "Graph" (
    doc = '''A node-graph is a container for asset nodes, as well as other 
  node-graphs. It has a public input interface and provides a list of public 
  outputs.

  <b>Node Graph Interfaces</b>
  
  One of the most important functions of a node-graph is to host the "interface"
  with which clients of already-built nodes networks will interact.  Please
  see "Interface Inputs" for a detailed
  explanation of what the interface provides, and how to construct and
  use it, to effectively share/instance nodes networks.

  <b>Node Graph Ports</b>

  These are typically connected to an input on a other node inside the node-graph.
  These are also used to author and animate input parameters.
  '''
)
{
}

class Node "Node" (
    doc = """Base class for all Amnesia Nodes.
    """
)
{
}

class Stage "Stage" (
    doc = "Class for the terminal stage node"
)
{
    uniform string fileName (
        doc = "ar-solvable file path on disk"
    )
    token[] inputs:layers (
        doc = "Relationships to the layers composing this stage."
    )
    uniform token lifetimeManagement (
        allowedTokens = ["on-disk", "in-memory"]
        doc = """Encodes the lifetime management of the stage, on-disk or
        in-memory"""
    )
    uniform string[] loadPrimsPath (
        doc = """Full Path to prims on the stage.
        These prims will be associated with state below on loading the stage.
        """
    )
    uniform token[] loadPrimsStates (
        allowedTokens = ["AllRule", "OnlyRule", "NoneRule"]
        doc = """Load rule for the associated prim.
            - AllRule : Include payloads on the specified prim and all 
              descendants.
            - OnlyRule : Include payloads on the specified prim but no 
              descendants.
            - NoneRule : Exclude payloads on the specified prim and all 
              descendants.
        """
    )
    uniform string[] populationMask (
        doc = """Set of fullpath to prims on the stage.
            This set represents a mask that may be applied to a stage to limit 
            the prims it populates.
        """
    )
}

class Deformable "Deformable" (
    doc = """A Deformable provides a hub into which multiple layers are 
  composed according to the node state and provide deformed geometry over 
  time to upstream the pipeline.
  """
)
{
    token inputs:geometry (
        displayGroup = "Inputs"
        doc = "Describes the <i>input geometry</i> input on a Deformable."
    )
    token outputs:deformed (
        displayGroup = "Outputs"
        doc = "Describes the <i>result geometry</i> output on a AssetNode."
    )
}

class Layer "Layer" (
    doc = """Class for the layer node.
      A layer is a unit of scene description that you combine with other units
      of scene description to form a shot, model, set, shader, and so on.
    """
)
{
    uniform string fileName (
        doc = "ar-solvable file path on disk"
    )
    token[] outputs:result (
        displayGroup = "Outputs"
        doc = "loaded result for this layer."
    )
}

class "ConnectableAPI" (
    doc = """ConnectableAPI is an API schema that provides a common
  interface for creating outputs and making connections between nodes.
  The interface is common to all Graph schemas including Node, Graph, 
  and Deformable.

  One can construct a ConnectableAPI directly from a UsdPrim, or
  from objects of any of the schema classes listed above.  If it seems
  onerous to need to construct a secondary schema object to interact with
  Inputs and Outputs, keep in mind that any function whose purpose is either
  to walk shot description networks via their connections, or to create such
  networks, can typically be written entirely in terms of 
  ConnectableAPI objects, without needing to care what the underlying
  prim type is.

  Additionally, the most common ConnectableAPI behaviors
  (creating Inputs and Outputs, and making connections) are wrapped as
  convenience methods on the prim schema classes (creation) and 
  InputPort and OutputPort.
  """
)
{
}

class "DeformableAPI" (
    doc = """DeformableAPI is an API schema that provides an 
  interface for binding assets to different states(animation, cfx, cached...). 
  """
)
{
}

class "CoordSysAPI" (
    doc = '''CoordSysAPI provides a way to designate, name,
    and discover coordinate systems.

    Coordinate systems are implicitly established by UsdGeomXformable
    prims, using their local space.  That coordinate system may be
    bound (i.e., named) from another prim.  The binding is encoded
    as a single-target relationship in the "coordSys:" namespace.
    Coordinate system bindings apply to descendants of the prim
    where the binding is expressed, but names may be re-bound by
    descendant prims.

    Named coordinate systems are useful in animation workflows.
    An example is camera base sculpting.  
    Using the paint coordinate frame avoids the need to assign 
    a UV set to the object, and can be a concise way to project
    sculpt across a collection of objects with a single shared
    paint coordinate system.

    This is a non-applied API schema.
    '''
)
{
}


#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED.  DO NOT EDIT."
    customLayerData = {
        string[] appliedAPISchemas = ["ComposerBindingAPI"]
        string[] multipleApplyAPISchemas = []
    }
)

class Graph "Graph" (
    doc = '''A node-graph is a container for asset nodes, as well as other 
  node-graphs. It has a public input interface and provides a list of public 
  outputs.

  <b>Node Graph Interfaces</b>
  
  One of the most important functions of a node-graph is to host the "interface"
  with which clients of already-built nodes networks will interact.  Please
  see "Interface Inputs" for a detailed
  explanation of what the interface provides, and how to construct and
  use it, to effectively share/instance nodes networks.

  <b>Node Graph Ports</b>

  These are typically connected to an input on a other node inside the node-graph.
  These are also used to author and animate input parameters.
  '''
)
{
}

class Composer "Composer" (
    doc = '''A Composer provides a container into which multiple state of
  an "asset" pass datas to upstream the pipeline.
  '''
)
{
    token outputs:deformed (
        displayGroup = "Outputs"
        doc = "Describes the <i>deformed geometry</i> output terminal on a Composer."
    )
}

class Node "Node" (
    doc = """Base class for all Amnesia Nodes.
    """
)
{
    uniform token info:id (
        doc = """The id is an identifier for the type or purpose of the 
      shader. E.g.: Texture or FractalFloat.
      The use of this id will depend on the render target: some will turn it
      into an actual shader path, some will use it to generate shader source 
      code dynamically.
      
      \\sa SetShaderId()
      """
    )
    uniform token info:implementationSource = "id" (
        allowedTokens = ["id", "sourceAsset", "sourceCode"]
        doc = """Specifies the attribute that should be consulted to get the 
      shader's implementation or its source code.

      * If set to \"id\", the \"info:id\" attribute's value is used to 
      determine the shader source from the shader registry.
      * If set to \"sourceAsset\", the resolved value of the \"info:sourceAsset\" 
      attribute corresponding to the desired implementation (or source-type)
      is used to locate the shader source.
      * If set to \"sourceCode\", the value of \"info:sourceCode\" attribute 
      corresponding to the desired implementation (or source type) is used as 
      the shader source.
      """
    )
}

class "ConnectableAPI" (
    doc = """ConnectableAPI is an API schema that provides a common
  interface for creating outputs and making connections between nodes.
  The interface is common to all Graph schemas including Node, Graph, 
  and Composer.

  One can construct a ConnectableAPI directly from a UsdPrim, or
  from objects of any of the schema classes listed above.  If it seems
  onerous to need to construct a secondary schema object to interact with
  Inputs and Outputs, keep in mind that any function whose purpose is either
  to walk shot description networks via their connections, or to create such
  networks, can typically be written entirely in terms of 
  ConnectableAPI objects, without needing to care what the underlying
  prim type is.

  Additionally, the most common ConnectableAPI behaviors
  (creating Inputs and Outputs, and making connections) are wrapped as
  convenience methods on the prim schema classes (creation) and 
  InputPort and OutputPort.
  """
)
{
}

class "ComposerBindingAPI" (
    doc = """ComposerBindingAPI is an API schema that provides an 
  interface for binding assets to different states(animation, cfx, cached...). 
  """
)
{
}

class "CoordSysAPI" (
    doc = '''CoordSysAPI provides a way to designate, name,
    and discover coordinate systems.

    Coordinate systems are implicitly established by UsdGeomXformable
    prims, using their local space.  That coordinate system may be
    bound (i.e., named) from another prim.  The binding is encoded
    as a single-target relationship in the "coordSys:" namespace.
    Coordinate system bindings apply to descendants of the prim
    where the binding is expressed, but names may be re-bound by
    descendant prims.

    Named coordinate systems are useful in animation workflows.
    An example is camera base sculpting.  
    Using the paint coordinate frame avoids the need to assign 
    a UV set to the object, and can be a concise way to project
    sculpt across a collection of objects with a single shared
    paint coordinate system.

    This is a non-applied API schema.
    '''
)
{
}


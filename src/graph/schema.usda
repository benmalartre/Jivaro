#usda 1.0
(
  "This file describes the Man Graph schemata for code generation."
  subLayers = [
    @usd/schema.usda@
  ]
)

over "GLOBAL" (
  customData = {
    string libraryName      = "Graph"
    string libraryPath      = "Graph"
    dictionary libraryTokens = {
      dictionary full = {
        string doc= """Possible value for 'connectability' metadata on
        a InputPort. When connectability of an input/output is set to
        "full", it implies that it can be connected to any other port.
        """
      }
      dictionary interfaceOnly = {
        string doc= """Possible value for 'connectability' metadata on 
        a InputPort. It implies that the input can only connect to 
        a NodeGraph Input (which represents an interface override, not 
        a computation-time dataflow connection), or another Input whose 
        connectability is also 'interfaceOnly'.
        """
      }
      dictionary connectedSourceFor = {
        string value = "connectedSourceFor:"
        string doc = """The prefix on Asset relationships
        associated with a Parameter.

        This prefixed relationship has a suffix matching the associated
        attribute name, and denotes a logical connection between
        AssetNodes.
        """
      }
      dictionary outputs = {
        string value = "outputs:"
        string doc = """The prefix on output ports.
        """
      }
      dictionary inputs = {
        string value = "inputs:"
        string doc = """The prefix on input ports.
        """
      }
    }
  }
)
{
}

class NodeGraph "NodeGraph" (
  inherits = </Typed>
  doc = """A node-graph is a container for asset nodes, as well as other 
  node-graphs. It has a public input interface and provides a list of public 
  outputs.

  <b>Node Graph Interfaces</b>
  
  One of the most important functions of a node-graph is to host the "interface"
  with which clients of already-built nodes networks will interact.  Please
  see \\ref GraphNodeGraph_Interfaces "Interface Inputs" for a detailed
  explanation of what the interface provides, and how to construct and
  use it, to effectively share/instance nodes networks.

  <b>Node Graph Ports</b>

  These are typically connected to an input on a other node inside the node-graph.
  These are also used to author and animate input parameters.
  """
  customData = {
	string extraIncludes = '''
#include <utility>
#include <pxr/usd/usd/editTarget.h>
#include <pxr/usd/usd/relationship.h>
#include "input.h"
#include "output.h"
#include "node.h"
'''
}) 
{
}

class NodeComposer "NodeComposer" (
  inherits = </NodeGraph>
  doc = """A NodeComposer provides a container into which multiple "assets"
  can add data that defines datas to upstream the pipeline.  Typically
  this consists of one or more UsdRelationship properties that target
  other prims of type \\em Asset - though a target/client is free to add
  any data that is suitable.  We <b>strongly advise</b> that all targets
  adopt the convention that all properties be prefixed with a namespace
  that identifies the target, e.g. "rel Bob:geom = </Geometry/Head>".
  """
  customData = {
    string extraIncludes = '''
#include "asset.h"
#include "node.h"
#include "connectableAPI.h"'''
  dictionary schemaTokens = {
    dictionary geometry = {
      string doc = """The modeling variation described on a NodeComposer."""
    }
    dictionary animRig = {
      string doc = """The animation rig variation described on a NodeComposer."""
    }
    dictionary cfxRig = {
      string doc = """The character fx rig variation described on a NodeComposer."""
    }
    dictionary animDatas = {
      string doc = """The animation datas variation described on a NodeComposer."""
    }
    dictionary cfxDatas = {
      string doc = """The characterFX datas variation described on a NodeComposer."""
    }
    dictionary animCache = {
      string doc = """The animation cache variation described on a NodeComposer."""
    }
    dictionary cfxCache = {
      string doc = """The characterFX cache variation described on a NodeComposer."""
    }
    dictionary derivesFrom  = {
      string doc = """A legacy relationship name specifying a specializes 
        composition on a NodeComposer."""
    }
    dictionary deformed = {
      string doc = """Describes the <i>deformed geometry</i> output terminal 
      on a NodeComposer. It is used to cache the resulting geometry of a 
      NodeComposer."""
    }
  }
}) 
{
  token outputs:deformed (
    doc = """Describes the <i>deformed geometry</i> output terminal on a NodeComposer."""
    displayGroup = "Outputs"
    customData = {
      string apiName = "deformed"
    }
  )
}

class Node "Node" (
  inherits = </Typed>
  doc = """Base class for all Nodes. Nodes are the building blocks
  of deformation networks.
  
  Objects of this class generally represent a single object, whether
  it exists in the target renderer or not. For example, a geometry, a manipulator,
  or a computation node...

  The main property of this class is the info:id token, which uniquely 
  identifies the type of this node.

  The purpose of representing them in Usd is two-fold:
  \\li To represent, via "connections" the topology of the deformation network
  that must be reconstructed in the client application. Facilities for authoring and 
  manipulating connections are encapsulated in the Has-A schema ConnectableAPI.
  \\li To present a (partial or full) interface of typed input parameters 
  whose values can be set and overridden in Usd, to be provided later at 
  deformation-time as parameter values to the actual nodes. Node 
  input parameters are encapsulated in the property schema InputPort.
  """ 
  customData = {
    string extraIncludes = '''
#include "input.h"
#include "output.h"
#include <pxr/usd/ndr/declare.h>
'''
  }
) 
{
}

class "ConnectableAPI"
(
  inherits = </APISchemaBase>
  doc = """ConnectableAPI is an API schema that provides a common
  interface for creating outputs and making connections between nodes 
  parameters and outputs. The interface is common to all Graph schemas
  that support Inputs and Outputs, which currently includes Node,
  NodeGraph, and NodeComposer .

  One can construct a ConnectableAPI directly from a UsdPrim, or
  from objects of any of the schema classes listed above.  If it seems
  onerous to need to construct a secondary schema object to interact with
  Inputs and Outputs, keep in mind that any function whose purpose is either
  to walk shot description networks via their connections, or to create such
  networks, can typically be written entirely in terms of 
  ConnectableAPI objects, without needing to care what the underlying
  prim type is.

  Additionally, the most common ConnectableAPI behaviors
  (creating Inputs and Outputs, and making connections) are wrapped as
  convenience methods on the prim schema classes (creation) and 
  InputPort and OutputPort.
  """ 
  customData = {
    token apiSchemaType = 'nonApplied'
    string extraIncludes = '''
#include "node.h"
#include "nodeGraph.h"
'''
  }
)
{
}

class "ComposerBindingAPI"
(
  inherits = </APISchemaBase>
  doc = """ComposerBindingAPI is an API schema that provides an 
  interface for binding assets to different states(animation, cfx, cached...). 
  """ 
  customData = {
    string extraIncludes = '''
    '''
      dictionary schemaTokens = {
        dictionary stateBinding = {
          string value = "state:binding"
          string doc = """
          The current state of the asset.
          """
        }
        
        dictionary animRig = {
          string doc = """When in 'animRig state, the asset will exhibit
            it's animation controls and authored animation curves.
          """
        }

        dictionary cfxRig = {
          string doc = """When in 'cfxRig state, the asset will exhibit
            the animation cache + the cfx rig to be simulated/sculpted on top.
          """
        }
        dictionary animationCache = {
          string doc = """When in 'animationCache state, the asset will exhibit
            the animation cache only.
          """
        }
        dictionary cfxCache = {
          string doc = """When in 'cfxCache state, the asset will exhibit
            the animation cache with the cfx cache override on top.
          """
        }
      }
    }
)
{
    
}

class "CoordSysAPI"
(
    inherits = </APISchemaBase>
    doc = """CoordSysAPI provides a way to designate, name,
    and discover coordinate systems.

    Coordinate systems are implicitly established by UsdGeomXformable
    prims, using their local space.  That coordinate system may be
    bound (i.e., named) from another prim.  The binding is encoded
    as a single-target relationship in the "coordSys:" namespace.
    Coordinate system bindings apply to descendants of the prim
    where the binding is expressed, but names may be re-bound by
    descendant prims.

    Named coordinate systems are useful in animation workflows.
    An example is camera base sculpting.  
    Using the paint coordinate frame avoids the need to assign 
    a UV set to the object, and can be a concise way to project
    sculpt across a collection of objects with a single shared
    paint coordinate system.

    This is a non-applied API schema.
    """
    customData = {
        token apiSchemaType = "nonApplied"
        string extraIncludes = '''
#include "pxr/usd/usdGeom/xformable.h"'''
        dictionary schemaTokens = {
            dictionary coordSys = {
                string value = "coordSys:"
                string doc = """Namespace prefix for relationships that
                bind coordinate systems."""
            }
        }
    }
)
{
}

#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
)

class ExecGraph "ExecGraph" (
    doc = '''A exec-graph is a container for exec-nodes, as well as other \r
    exec-graphs. It has a public input interface and provides a list of public \r
    outputs.\r
\r
    <b>Exec Graph Interfaces</b>\r
    \r
    One of the most important functions of a exec-graph is to host the "interface"\r
    with which clients of already-built execution networks will interact.  Please\r
    see "Interface Inputs" for a detailed\r
    explanation of what the interface provides, and how to construct and\r
    use it, to effectively share/instance execution networks.\r
\r
    <b>Exec Graph Outputs</b>\r
\r
    These behave like outputs on a exec-node and are typically connected to an \r
    output on a exec-node inside the exec-graph.\r
    '''
)
{
}

class ExecNode "ExecNode" (
    doc = '''Base class for all USD execution nodes. Exec-nodes are the building blocks\r
    of procedural networks.\r
\r
    The purpose of representing them in Usd is two-fold:\r
    - To represent, via "connections" the topology of the procedural network\r
    that must be reconstructed in the engine. Facilities for authoring and \r
    manipulating connections are encapsulated in the API schema \r
    ExecConnectableAPI.\r
    - To present a (partial or full) interface of typed input parameters \r
    whose values can be set and overridden in Usd, to be provided later at \r
    run-time as parameter values to the actual procedural objects. Node \r
    input parameters are encapsulated in the property schema ExecInput.\r
    '''
)
{
}

class "ExecConnectableAPI" (
    doc = """ExecConnectableAPI is an API schema that provides a common\r
    interface for creating outputs and making connections between \r
    parameters and outputs. The interface is common to all UsdExec schemas\r
    that support Inputs and Outputs, which currently includes UsdExecNode,\r
    UsdExecGraph, and UsdExecBundle .\r
\r
    One can construct a ExecConnectableAPI directly from a UsdPrim, or\r
    from objects of any of the schema classes listed above.  If it seems\r
    onerous to need to construct a secondary schema object to interact with\r
    Inputs and Outputs, keep in mind that any function whose purpose is either\r
    to walk node networks via their connections, or to create such\r
    networks, can typically be written entirely in terms of \r
    ExecConnectableAPI objects, without needing to care what the underlying\r
    prim type is.\r
\r
    Additionally, the most common ExecConnectableAPI behaviors\r
    (creating Inputs and Outputs, and making connections) are wrapped as\r
    convenience methods on the prim schema classes (creation) and \r
    UsdExecInput and UsdExecOutput.\r
    """
)
{
}

